---
- name: Create VMs
  hosts: proxmox
  gather_facts: false
  become: yes
  vars_files:
    - "{{ lookup('env', 'HOME') }}/devops/github/homelab/IaC/ansible/inventory/group_vars/proxmox_vms.yaml"
    - "{{ lookup('env', 'HOME') }}/devops/github/homelab/IaC/ansible/inventory/group_vars/proxmox.yaml"
    - "{{ lookup('env', 'HOME') }}/devops/github/homelab/IaC/ansible/inventory/group_vars/proxmox_isos.yaml"
  tasks:
    - name: Initialize iso_files list
      set_fact:
        iso_files_list: []

    - name: Find matching ISO for each VM
      set_fact:
        iso_files_list: "{{ iso_files_list + [(iso_files | selectattr('name', 'equalto', vm.name) | map(attribute='filename') | first) | default('')] }}"
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm

    - name: Debug ISO files list
      debug:
        var: iso_files_list

    - name: Initialize vm_exists list
      set_fact:
        vm_exists: []

    - name: Check if VM exists
      ansible.builtin.shell: |
        qm list | grep -w {{ vm.dns_name }}
      register: vm_exists_check
      ignore_errors: true
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm

    - name: Set VM exists fact
      set_fact:
        vm_exists: "{{ vm_exists + [(vm_exists_check.results | default([]) | length > loop_index and vm_exists_check.results[loop_index].rc == 0)] }}"
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm
        index_var: loop_index

    - name: Create VMs
      ansible.builtin.command:
        cmd: >
          pvesh create /nodes/{{ proxmox_node }}/qemu
          -vmid {{ vm.vmid }}
          -name {{ vm.dns_name }}
          -sockets 1
          -cores {{ vm.cpu }}
          -memory {{ vm.memory }}
          -ide2 local:iso/{{ iso_files_list[loop_index] }},media=cdrom
          -ostype {{ vm.os_type }}
          -scsihw virtio-scsi-pci
          {% for i in range(vm.networks | length) %} 
          -net{{ i }} virtio,bridge={{ vm.networks[i].bridge }}
          {% endfor %}
      when: not vm_exists[loop_index]  # Checks if the VM does not exist for the current loop index
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm
        index_var: loop_index

    - name: Initialize disk_exists list
      set_fact:
        disk_exists: []

    - name: Check if thin-provisioned disk exists
      ansible.builtin.shell: |
        qm config {{ vm.vmid }} | grep -w "scsi0: local-lvm:vm-{{ vm.vmid }}-disk-0.raw"
      register: disk_exists_check
      ignore_errors: true
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm

    - name: Set disk exists fact
      set_fact:
        disk_exists: "{{ disk_exists + [disk_exists_check.results[loop_index].rc == 0 and not disk_exists_check.results[loop_index].failed] }}"
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm
        index_var: loop_index

    - name: Debug disk exists
      debug:
        var: disk_exists

    - name: Create thin-provisioned disk image for each VM
      ansible.builtin.shell:
        cmd: >
          qemu-img create -f raw /dev/pve/vm-{{ vm.vmid }}-disk-0.raw {{ vm.disk_size }}
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm

    - name: Attach disk to VM
      ansible.builtin.command:
        cmd: >
          qm set {{ vm.vmid }} -scsi0 /dev/pve/vm-{{ vm.vmid }}-disk-0.raw,format=raw,size={{ vm.disk_size }}
      when: not disk_exists[loop_index]
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm
        index_var: loop_index

    - name: Check if VM is running
      ansible.builtin.shell: |
        qm status {{ vm.vmid }} | grep -w "status: running"
      register: vm_status_check
      ignore_errors: true
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm

    - name: Start VMs if not running
      ansible.builtin.command:
        cmd: >
          qm start {{ vm.vmid }}
      when: vm_status_check.results[loop_index].rc != 0
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm
        index_var: loop_index